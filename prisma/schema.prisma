// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  GOOGLE
  PASSWORD
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id            String      @id @default(uuid())
  userId        String      @unique
  password      String?
  emailVerified Boolean?    @default(false)
  type          AccountType
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model verifyEmailOtp {
  id       String   @id @unique @default(uuid())
  userId   String   @unique
  otp      String   @unique
  expireAt DateTime
}

model User {
  id        String   @id @default(uuid())
  fullname  String
  avatar    String?
  email     String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeId String?

  domains Domain[]

  campaign Campaign[]

  subscription Billings?
  Session      Session[]
  Account      Account?
}

model Domain {
  id   String @id @default(uuid())
  name String
  icon String

  chatBot         ChatBot?
  helpdesk        HelpDesk[]
  filterQuestions FilterQuestions[]
  products        Product[]

  customer   Customer[]
  User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  Campaign   Campaign?  @relation(fields: [campaignId], references: [id])
  campaignId String?
}

model ChatBot {
  id             String  @id @default(uuid())
  welcomeMessage String?
  icon           String?
  background     String?
  textColor      String?
  helpdesk       Boolean @default(false)
  Domain         Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId       String? @unique
}

model Billings {
  id      String  @id @default(uuid())
  plan    Plans   @default(STANDARD)
  credits Int     @default(10)
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String? @unique
}

model HelpDesk {
  id       String @id @default(uuid())
  question String
  answer   String

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String?
}

model FilterQuestions {
  id       String  @id @default(uuid())
  question String
  answered String?

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String?
}

model CustomerResponses {
  id         String   @id @default(uuid())
  question   String
  answered   String?
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
}

model Customer {
  id    String  @id @default(uuid())
  email String?

  questions CustomerResponses[]

  chatRoom ChatRoom[]

  booking Bookings[]

  Domain   Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String?
}

model ChatRoom {
  id         String    @id @default(uuid())
  live       Boolean   @default(false)
  mailed     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?

  message ChatMessage[]
}

model ChatMessage {
  id         String    @id @default(uuid())
  message    String
  role       Role?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?
  seen       Boolean   @default(false)
}

model Bookings {
  id         String    @id @default(uuid())
  date       DateTime
  slot       String
  email      String
  Customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?
  domainId   String?
  createdAt  DateTime  @default(now())
}

model Campaign {
  id        String   @id @default(uuid())
  name      String
  customers String[]
  domain    Domain[]
  template  String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  createdAt DateTime @default(now())
}

model Product {
  id        String   @id @default(uuid())
  name      String
  price     Int
  image     String
  createdAt DateTime @default(now())
  Domain    Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String?
}

enum Plans {
  STANDARD
  PRO
  ULTIMATE
}

enum Role {
  user
  assistant
}
